---
import Layout from "../layouts/Layout.astro";
import { contentfulClient } from "../lib/contentful";
import type { Asset } from "contentful";
import type { RecipePost, Categories, Person } from "../lib/contentful";
import { marked, lexer } from "marked";
import { Schema } from "astro-seo-schema";
import { formatDate } from "../services/formatDate";
import Category from "../components/Category.astro";

let post;
let ingredients;
const { slug } = Astro.params;
try {
  const data = await contentfulClient.getEntries<RecipePost>({
    content_type: "recipe",
    "fields.slug": slug,
  });
  const {
    title,
    description,
    featuredImage,
    categories,
    author,
    publishDate,
    excerpt,
  }: {
    title: string;
    description: string;
    featuredImage: Asset;
    categories: Categories[];
    author: Person;
    publishDate: string;
    excerpt: string;
  } = data.items[0].fields;

  post = {
    title,
    description: marked.parse(description),
    featuredImage: featuredImage?.fields?.file?.url,
    categories: categories?.map(({ fields }) => fields),
    author: author?.fields?.name,
    publishDate: formatDate(publishDate),
    excerpt,
    contentTokens: lexer(description),
  };

  const tokens = post.contentTokens;

  let ingredientsIndex;
  tokens.map((token, index) => {
    if (token?.raw?.toLowerCase().includes("ingredien")) {
      ingredientsIndex = index + 1;
    }
  });
  ingredients = tokens[ingredientsIndex].items;

  console.log(ingredients);
} catch (error) {
  return Astro.redirect("/404");
}
---

<Layout title={post?.title}>
  <Schema
    item={{
      "@context": "https://schema.org",
      "@type": "Recipe",
      name: post?.title,
      author: {
        "@type": "Person",
        name: post?.author,
      },
      datePublished: post?.publishDate,
      description: post?.excerpt,
      image: post?.featuredImage,
      recipeCategory: post?.categories.map(
        (category: Categories["fields"]) => category.name
      ),
      recipeIngredient: ingredients?.map((ingredient) => ingredient.text),
    }}
  />
  <main class="pt-8 pb-16 lg:pt-16 lg:pb-24 bg-white dark:bg-gray-900">
    <div class="flex justify-between px-4 mx-auto max-w-screen-xl">
      <article
        class="mx-auto w-full max-w-2xl format format-sm sm:format-base lg:format-lg format-blue dark:format-invert"
      >
        <header class="mb-4 lg:mb-6 not-format">
          <ul class="flex items-center gap-2 mb-4">
            {
              post?.categories.map((category: Categories["fields"]) => (
                <li>
                  <Category
                    name={category?.name}
                    href={`/category/${category.slug}`}
                  />
                </li>
              ))
            }
          </ul>
          <h1
            class="mb-4 text-3xl font-extrabold leading-tight text-gray-900 lg:mb-6 lg:text-5xl dark:text-white"
          >
            {post?.title}
          </h1>
          <img
            src={post?.featuredImage}
            alt=""
            class="rounded-lg object-cover max-h-80 w-full mb-7"
          />
          <address class="flex not-italic items-baseline mb-14">
            <p class="text-base font-light text-gray-500 dark:text-gray-400">
              <a
                href={`/author/${post?.author?.slug}`}
                rel="author"
                class="underline hover:text-primary-700"
              >
                {post?.author?.name}
              </a>
              <time pubdate datetime="2022-02-08" title="February 8th, 2022"
                >en {post?.publishDate}</time
              >
            </p>
          </address>
        </header>
        <div set:html={post?.description} />
      </article>
    </div>
  </main>
</Layout>
